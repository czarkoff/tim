#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011 Dmitrij D. Czarkoff <czarkoff@gmail.com>
# 
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import os.path, re, sys, Tkinter
from PIL import Image, ImageTk

def phelp(detailed=False):
    sys.stdout.write("{0} {1}\n".format(progname, __version__))
    sys.stdout.write("usage: {0} infile [-c GEOMERTY] [-f] [+f] [-r ANGLE] [-s GEOMETRY] outfile\n".format(progname))
    sys.stdout.write("\n")
    sys.stdout.write("options (filters):\n")
    sys.stdout.write("  -c GEOMETRY  crop an area with the specified GEOMETRY from image\n")
    sys.stdout.write("  -f           flip image horizontally\n")
    sys.stdout.write("  +f           flip image vertically\n")
    sys.stdout.write("  -r ANGLE     rotate an image ANGLE degrees clockwise\n")
    sys.stdout.write("  -q QUALITY   specify output quality (will be ignored if unapplicable)\n")
    sys.stdout.write("  -s GEOMETRY  scale an image to GEOMETRY\n")
    if not detailed:
        sys.stdout.write("  -h           print detailed help\n")
        return
    sys.stdout.write("  -h           print this help\n")
    sys.stdout.write("\n")
    sys.stdout.write("All EXIF data is stripped from infile. If EXIF orientation was specified, image\n")
    sys.stdout.write("it is applied.\n")
    sys.stdout.write("\n")
    sys.stdout.write("GEOMETRY can be secified as XxY (X and Y are either absolute values or percents)\n")
    sys.stdout.write("\n")
    sys.stdout.write("By default, the \"-s\" (scale) operation doesn't maintain aspect ratio of image.\n")
    sys.stdout.write("This behaviour may be overriden using postfixes \"A\" (new dimentions are at least\n")
    sys.stdout.write("as specified) or \"a\" (new dimentions are at most as specified).\n")
    sys.stdout.write("\n")
    sys.stdout.write("The spec for \"-c\" (crop) operation can be ammended with \"c\" postfix to specify\n")
    sys.stdout.write("that the area should be croped from center of image. Another way to specify area\n")
    sys.stdout.write("is to add a pair of offsets in form of two subsequent signed numbers, first\n")
    sys.stdout.write("being the horizontal offset (positive - from left, negative - from right),\n")
    sys.stdout.write("second - the vertical one (positive - from top, negative - from bottom).\n")
    sys.stdout.write("Elsewise the UI will be brough up help You choose the crp area position\n")
    sys.stdout.write("\n")
    sys.stdout.write("Every operation is performed on result of previous operation.\n")
    sys.stdout.write("\n")
    sys.stdout.write("Correct {0} invokation examples:\n".format(progname))
    sys.stdout.write("\n")
    sys.stdout.write("$ {0} old.jpg -s 500x700 -r 90 -c 100x100+20-10 -s 500x700A +f new.png\n".format(progname))
    sys.stdout.write("\n")
    sys.stdout.write("  1. scale image to dimensions 500x700 regardless initial aspect ratio;\n")
    sys.stdout.write("  2. rotate the result 90 degrees clockwise;\n")
    sys.stdout.write("  3. from the result crop the 100x100 area offset by 20 from left and 10 from\n")
    sys.stdout.write("     bottom;\n")
    sys.stdout.write("  4. scale the result maintaining its aspect ratio to make its width no less;\n")
    sys.stdout.write("     then 500 and its height no less then 700\n")
    sys.stdout.write("  5. flip the result vertically;\n")
    sys.stdout.write("  6. export the result to file new.png in PNG format.\n")
    sys.stdout.write("\n")
    sys.stdout.write("$ {0} file.jpg -c 50%x50% file.jpg\n".format(progname))
    sys.stdout.write("\n")
    sys.stdout.write("Bring up UI to choose the position to crop 50%x50% area and strip EXIF data from\n")
    sys.stdout.write("image it *IN PLACE*.\n")
    sys.stdout.write("\n")
    sys.stdout.write("$ {0} old.jpg new.png\n".format(progname))
    sys.stdout.write("\n")
    sys.stdout.write("Convert image from JPEG to PNG format.\n".format(progname))
    
def perror(error):
    sys.stderr.write(progname + ": " + error + "\n")

class Batch:
    def __init__(self, commands):
        self.quality = 85
        self._re_crop = re.compile("([0-9]+)(%)?x([0-9]+)(%)?(([+-][0-9]+)([+-][0-9]+)|c)?$")
        self._re_scale = re.compile("([0-9]+)(%)?x([0-9]+)(%)?(A|a)?$")

        commands.reverse()

        self.convayor = list()
        while len(commands) > 0:
            cmd = commands.pop()
            try:
                if cmd == "-c":
                    self.convayor.append((self._crop, commands.pop()))
                elif cmd == "-f":
                    self.convayor.append((self._flip, Image.FLIP_LEFT_RIGHT))
                elif cmd == "+f":
                    self.convayor.append((self._flip, Image.FLIP_TOP_BOTTOM))
                elif cmd == "-q":
                    self.convayor.append((self._quality, int(commands.pop())))
                elif cmd == "-r":
                    self.convayor.append((self._rotate, -1*int(commands.pop())%360))
                elif cmd == "-s":
                    self.convayor.append((self._scale, commands.pop()))
                else:
                    raise KeyError("no such command: {0}".format(cmd))
            except ValueError as error:
                raise ValueError("(\"{0}\") {1}".format(cmd, error[-1]))
            except KeyError as error:
                raise KeyError("(arguments) {1}".format(cmd, error[-1]))
            except IndexError:
                raise IndexError("(arguments) no argument provided for command {0}".format(cmd))
            
    def _crop(self, spec):
        try:
            geometry = self._geom_crop(spec)
        except ValueError as error:
            raise ValueError("\"-c\" ({0}) {1}".format(self.opno, error[-1]))
        if geometry[0] == "edit":
            geometry = self.edit(geometry[1:])
        if geometry == None:
            perror("(\"-c\") canceled wia GUI")
            sys.exit(0)

        try:
            self.image = self.image.crop(geometry)
        except MemoryError as error:
            raise MemoryError("\"-c\" ({0}) {1}".format(self.opno, error[-1]))

    def _flip(self, direction):
        try:
            self.image = self.image.transpose(direction)
        except MemoryError as error:
            raise MemoryError("\"-f\" ({0}) {1}".format(self.opno, error[-1]))

    def _quality(self, quality):
        self.quality = quality

    def _rotate(self, angle):
        if angle == 0:
            return
        elif angle == 90:
            self.image = self.image.transpose(Image.ROTATE_90)
        elif angle == 180:
            self.image = self.image.transpose(Image.ROTATE_180)
        elif angle == 270:
            self.image = self.image.transpose(Image.ROTATE_270)
        else:
            try:
                self.image = self.image.rotate(angle, Image.BICUBIC, True)
            except MemoryError as error:
                raise MemoryError("\"-r\" ({0}) {1}".format(self.opno, error[-1]))

    def _scale(self, spec):
        try:
            geometry = self._geom_scale(spec)
        except ValueError as error:
            raise ValueError("\"-s\" ({0}) {1}".format(self.opno, error[-1]))
        try:
            self.image = self.image.resize(geometry, Image.ANTIALIAS)
        except MemoryError as error:
            raise MemoryError("\"-s\" ({0}) {1}".format(self.opno, error[-1]))

    def _geom_crop(self, spec):
        geometry = self._re_crop.match(spec)
        if not geometry:
            raise ValueError("malformed spec: {0}".format(spec))
        
        bbox = self.image.getbbox()
        geometry = geometry.groups()

        if geometry[1]:
            x = bbox[2]*int(geometry[0])/100
        else:
            x = int(geometry[0])
        
        if geometry[3]:
            y = bbox[3]*int(geometry[0])/100
        else:
            y = int(geometry[2])

        if not geometry[4]:
            left, upper, right, lower = self.edit((x, y))
        
        elif geometry[4] == "c":
            left = (bbox[2] - x) / 2
            upper = (bbox[3] - y) / 2
            right = x + left
            lower = y + upper

        else:
            left = int(geometry[5])
            if geometry[5][0] == "-":
                left += bbox[2] - x
            right = x + left
            
            upper = int(geometry[6])
            if geometry[6][0] == "-":
                upper += bbox[2] - y
            lower = x + upper

        return (left, upper, right, lower)

    def _geom_scale(self, spec):
        geometry = self._re_scale.match(spec)
        if not geometry:
            raise ValueError("malformed spec: {0}".format(spec))
        
        bbox = self.image.getbbox()
        geometry = geometry.groups()

        if geometry[1]:
            x = bbox[2]*int(geometry[0])/100
        else:
            x = int(geometry[0])
        
        if geometry[3]:
            y = bbox[3]*int(geometry[0])/100
        else:
            y = int(geometry[2])

        if geometry[4]:
            if (float(bbox[2]*y)/bbox[3] > x):
                if geometry[4] == "a":
                    y = bbox[3]*x / bbox[2]
                elif geometry[4] == "A":
                    x = bbox[2]*y / bbox[3]
            elif (float(bbox[3]*x)/bbox[2] > y):
                if geometry[4] == "a":
                    x = bbox[2]*y / bbox[3]
                elif geometry[4] == "A":
                    y = bbox[3]*x / bbox[2]

        return (x, y)
    
    def edit(self, geometry):
        root = Tkinter.Tk()
        
        status = Tkinter.IntVar()
        left = Tkinter.IntVar()
        upper = Tkinter.IntVar()
        right = Tkinter.IntVar()
        lower = Tkinter.IntVar()
        
        bbox = self.image.getbbox()
        
        status.set(0)
        left.set(0)
        upper.set(0)
        right.set(bbox[2] - geometry[0])
        lower.set(bbox[3] - geometry[1])
        widget = CropPhoto(root, status, self.image, left, upper, right, lower, buttons=True)
        widget.pack()

        root.mainloop()

        if status.get() == 1:
            return (left.get(), upper.get(), bbox[2]-right.get(), bbox[3]-lower.get())
        else:
            raise KeyboardInterrupt("Cropping canceled in UI")

    def open(self, filename):
        self.image = Image.open(filename)
        try:
            orientation = self.image._getexif()[274]
            if orientation == 1:
                pass
            elif orientation == 2:
                self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
            elif orientation == 3:
                self.image = self.image.transpose(Image.ROTATE_180)
            elif orientation == 4:
                self.image = self.image.transpose(Image.FLIP_TOP_BOTTOM)
            elif orientation == 5:
                self.image = self.image.transpose(Image.FLIP_TOP_BOTTOM).transpose(Image.ROTATE_90)
            elif orientation == 6:
                self.image = self.image.transpose(Image.ROTATE_270)
            elif orientation == 7:
                self.image = self.image.transpose(Image.FLIP_TOP_BOTTOM).transpose(Image.ROTATE_270)
            elif orientation == 8:
                self.image = self.image.transpose(Image.ROTATE_90)
        except:
            pass

    def run(self):
        self.opno = 0
        for func, arg in self.convayor:
            self.opno += 1
            func(arg)
            try:
                self.image.getbbox()
            except AttributeError:
                raise StandardError("image is lost due to PIL bug")

    def save(self, filename):
        self.image.save(filename, quality=self.quality)

class CropPhoto(Tkinter.Frame):
    def __init__(self, master, status, img, left, upper, right, lower, buttons=False, **kw):
        self.state = True
        self.img = img
        self.status = status

        if not buttons:
            self.status.set(1)

        self.left = left
        self.upper = upper
        self.right = right
        self.lower = lower

        self.pleft = self.left.get()
        self.pupper = self.upper.get()
        self.pright = self.right.get()
        self.plower = self.lower.get()
        
        self.bbox = img.getbbox()

        Tkinter.Frame.__init__(self, master, **kw)
        self.etop = Tkinter.Entry(self, textvariable=self.upper, width=5)
        self.etop.grid(row=0, column=1)
        
        self.eleft = Tkinter.Entry(self, textvariable=self.left, width=5)
        self.eleft.grid(row=1, column=0)

        self.canvas = Tkinter.Canvas(self, width=img.getbbox()[2], height=img.getbbox()[3])
        self.photo = ImageTk.PhotoImage(self.img)
        self.canvas.create_image(0, 0, anchor=Tkinter.NW, image = self.photo);
        self.canvas.grid(row=1, column=1)

        self.rect = self.canvas.create_rectangle(self.left.get(), self.upper.get(), self.bbox[2]-self.right.get(), self.bbox[3]-self.lower.get())
        self.canvas.bind("<B1-Motion>", self.bp)
        self.canvas.bind("<ButtonRelease-1>", self.br)

        self.eright = Tkinter.Entry(self, textvariable=self.right, width=5)
        self.eright.grid(row=1, column=2)

        self.ebottom = Tkinter.Entry(self, textvariable=self.lower, width=5)
        self.ebottom.grid(row=2, column=1)

        self.eleft.bind("<Key>", self.left_key)
        self.etop.bind("<Key>", self.upper_key)
        self.eright.bind("<Key>", self.right_key)
        self.ebottom.bind("<Key>", self.lower_key)

        self.eleft.bind("<Return>", self.left_value)
        self.etop.bind("<Return>", self.upper_value)
        self.eright.bind("<Return>", self.right_value)
        self.ebottom.bind("<Return>", self.lower_value)

        self.b_cancel = Tkinter.Button(self, text="Abort", command=self.cancel)
        self.b_crop = Tkinter.Button(self, text="Crop", command=self.crop)
        
        if buttons:
            self.b_cancel.grid(row=2, column=0)
            self.b_crop.grid(row=2, column=2)

    def chkpair(self, a, b):
        if a.get() < 0:
            b.set(b.get() + a.get())
            a.set(0)
        elif b.get() < 0:
            a.set(a.get() + b.get())
            b.set(0)

    def bp(self, event):
        canvas = event.widget   
        if self.state:
            self.state = False
            self.x = canvas.canvasx(event.x)
            self.y = canvas.canvasy(event.y)
        else:
            x = int(canvas.canvasx(event.x) - self.x)
            y = int(canvas.canvasy(event.y) - self.y)
            self.x = canvas.canvasx(event.x)
            self.y = canvas.canvasy(event.y)
            self.left.set(self.left.get() + x)
            self.upper.set(self.upper.get() + y)
            self.right.set(self.right.get() - x)
            self.lower.set(self.lower.get() - y)
            self.chkpair(self.left, self.right)
            self.chkpair(self.upper, self.lower)
            self.canvas.coords(self.rect, self.left.get(), self.upper.get(), self.bbox[2]-self.right.get(), self.bbox[3]-self.lower.get())

    def br(self, event):
        self.state = True
        
    def left_value(self, event):
        self.right.set(self.right.get() - self.left.get() + self.pleft)
        self.chkpair(self.left, self.right)
        self.pleft = self.left.get()
        self.pright = self.right.get()
        self.canvas.coords(self.rect, self.left.get(), self.upper.get(), self.bbox[2]-self.right.get(), self.bbox[3]-self.lower.get())

    def upper_value(self, event):
        self.lower.set(self.lower.get() - self.upper.get() + self.pupper)
        self.chkpair(self.upper, self.lower)
        self.pupper = self.upper.get()
        self.plower = self.lower.get()
        self.canvas.coords(self.rect, self.left.get(), self.upper.get(), self.bbox[2]-self.right.get(), self.bbox[3]-self.lower.get())

    def right_value(self, event):
        self.left.set(self.left.get() - self.right.get() + self.pright)
        self.chkpair(self.left, self.right)
        self.pleft = self.left.get()
        self.pright = self.right.get()
        self.canvas.coords(self.rect, self.left.get(), self.upper.get(), self.bbox[2]-self.right.get(), self.bbox[3]-self.lower.get())

    def lower_value(self, event):
        self.upper.set(self.upper.get() - self.lower.get() + self.plower)
        self.chkpair(self.upper, self.lower)
        self.pupper = self.upper.get()
        self.plower = self.lower.get()
        self.canvas.coords(self.rect, self.left.get(), self.upper.get(), self.bbox[2]-self.right.get(), self.bbox[3]-self.lower.get())

    def left_key(self, event):
        if event.keysym == "Up":
            self.left.set(self.left.get() + 1)
        if event.keysym == "Down":
            self.left.set(self.left.get() - 1)
        if event.keysym == "Up" or event.keysym == "Down" or event.keysym == "Tab":
            self.left_value(event)

    def upper_key(self, event):
        if event.keysym == "Up":
            self.upper.set(self.upper.get() + 1)
        if event.keysym == "Down":
            self.upper.set(self.upper.get() - 1)
        if event.keysym == "Up" or event.keysym == "Down" or event.keysym == "Tab":
            self.upper_value(event)

    def right_key(self, event):
        if event.keysym == "Up":
            self.right.set(self.right.get() + 1)
        if event.keysym == "Down":
            self.right.set(self.right.get() - 1)
        if event.keysym == "Up" or event.keysym == "Down" or event.keysym == "Tab":
            self.right_value(event)

    def lower_key(self, event):
        if event.keysym == "Up":
            self.lower.set(self.lower.get() + 1)
        if event.keysym == "Down":
            self.lower.set(self.lower.get() - 1)
        if event.keysym == "Up" or event.keysym == "Down" or event.keysym == "Tab":
            self.lower_value(event)

    def cancel(self):
        self.quit()

    def crop(self):
        self.status.set(1)
        self.quit()

__version__ = "3-beta"

args = list()
for arg in sys.argv:
    args.append(arg)

progname = os.path.basename(args.pop(0))

if len(args) == 0:
    phelp()
    sys.exit(0)

elif args[0] == "-h":
    phelp(detailed=True)
    sys.exit(0)

verbose = False
while args.count("-v"):
    verbose = not verbose
    args.remove("-v")

if args.count("-"):
    perror("reading from and/or writing to pipes not supported")
    sys.exit(1)

infiles = list()
while os.path.exists(args[0]):
    infiles.append(args.pop(0))

template = args.pop()

try:
    batch = Batch(args)
except:
    raise   #placeholder for now
    sys.exit(1)

for infile in infiles:
    outfile = template.replace("%d", str(infiles.index(infile))).replace("%p", os.path.dirname(infile)).replace("%f", os.path.basename(infile))

    try:
        batch.open(infile)
    except IOError as error:
        perror("(input) failed to open \"{0}\"".format(infile))
        sys.exit(2)

    try:
        batch.run()
    except KeyboardInterrupt as error:
        perror("{0}: {1}".format(infile, error[-1]))
        sys.exit(0)
#    except StandardError as error:
#        perror("{0}: {1}".format(infile, error[-1]))
#        sys.exit(3)
    except:
        raise   #placeholder for now

    try:
        batch.save(outfile)
    except IOError as error:
        perror("(output) failed to write to \"{0}\"".format(outfile))
        sys.exit(2)

    if verbose:
        sys.stdout.write("{0} => {1}\n".format(infile, outfile))

# vim:set ts=4 et
